/*
 * This file is generated by jOOQ.
 */
package com.ddastudio.fishing.jooq.tables.records;


import com.ddastudio.fishing.jooq.tables.UsedRefreshToken;

import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsedRefreshTokenRecord extends UpdatableRecordImpl<UsedRefreshTokenRecord> implements Record3<String, LocalDateTime, String> {

    private static final long serialVersionUID = 660150521;

    /**
     * Setter for <code>fishing_reservation.used_refresh_token.token</code>.
     */
    public void setToken(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>fishing_reservation.used_refresh_token.token</code>.
     */
    public String getToken() {
        return (String) get(0);
    }

    /**
     * Setter for <code>fishing_reservation.used_refresh_token.created</code>.
     */
    public void setCreated(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>fishing_reservation.used_refresh_token.created</code>.
     */
    public LocalDateTime getCreated() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>fishing_reservation.used_refresh_token.client_id</code>.
     */
    public void setClientId(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>fishing_reservation.used_refresh_token.client_id</code>.
     */
    public String getClientId() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, LocalDateTime, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, LocalDateTime, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return UsedRefreshToken.USED_REFRESH_TOKEN.TOKEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field2() {
        return UsedRefreshToken.USED_REFRESH_TOKEN.CREATED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return UsedRefreshToken.USED_REFRESH_TOKEN.CLIENT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getToken();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component2() {
        return getCreated();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getClientId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getToken();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value2() {
        return getCreated();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getClientId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsedRefreshTokenRecord value1(String value) {
        setToken(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsedRefreshTokenRecord value2(LocalDateTime value) {
        setCreated(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsedRefreshTokenRecord value3(String value) {
        setClientId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsedRefreshTokenRecord values(String value1, LocalDateTime value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsedRefreshTokenRecord
     */
    public UsedRefreshTokenRecord() {
        super(UsedRefreshToken.USED_REFRESH_TOKEN);
    }

    /**
     * Create a detached, initialised UsedRefreshTokenRecord
     */
    public UsedRefreshTokenRecord(String token, LocalDateTime created, String clientId) {
        super(UsedRefreshToken.USED_REFRESH_TOKEN);

        set(0, token);
        set(1, created);
        set(2, clientId);
    }
}
