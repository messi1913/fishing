/*
 * This file is generated by jOOQ.
 */
package com.ddastudio.fishing.jooq.tables;


import com.ddastudio.fishing.common.converter.JsonColumnBinding;
import com.ddastudio.fishing.jooq.FishingReservation;
import com.ddastudio.fishing.jooq.Indexes;
import com.ddastudio.fishing.jooq.Keys;
import com.ddastudio.fishing.jooq.tables.records.BoatMasterRecord;
import com.google.gson.JsonElement;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 배 마스터 테이블
 *  - 하나의 선단은 보통 배를 1~5개 가짐 ( 배 추가 등록시마다 비용을 받아야됨 ) 
 *  - 등록된 배가 없으면 앱 이용이 불가 ( 클라이언트 프로그램 )
 *  - 관리자용 프로그램에서 등록 가능
 *  - type, captain_id, capacity, fish_type, from_time, to_time의 값들은 일정(schedule) 
 * 등록시 기본팅값으로 사용
 *    ( schedule 테이블에도 똑같은 컬럼이 존재 )
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BoatMaster extends TableImpl<BoatMasterRecord> {

    private static final long serialVersionUID = -2012850803;

    /**
     * The reference instance of <code>fishing_reservation.boat_master</code>
     */
    public static final BoatMaster BOAT_MASTER = new BoatMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BoatMasterRecord> getRecordType() {
        return BoatMasterRecord.class;
    }

    /**
     * The column <code>fishing_reservation.boat_master.app_id</code>. 앱 아이디
     */
    public final TableField<BoatMasterRecord, Integer> APP_ID = createField("app_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "앱 아이디");

    /**
     * The column <code>fishing_reservation.boat_master.id</code>. 배 아이디
     */
    public final TableField<BoatMasterRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "배 아이디");

    /**
     * The column <code>fishing_reservation.boat_master.name</code>. 배 이름
     */
    public final TableField<BoatMasterRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "배 이름");

    /**
     * The column <code>fishing_reservation.boat_master.type</code>. 선박종류
 - code_master(BOAT_TYPE)
 - 0:일반낚시, 1:종일낚시, 2:시간낚시
 - 현재는 사용안함
     */
    public final TableField<BoatMasterRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "선박종류\n - code_master(BOAT_TYPE)\n - 0:일반낚시, 1:종일낚시, 2:시간낚시\n - 현재는 사용안함");

    /**
     * The column <code>fishing_reservation.boat_master.captain_id</code>. 선장 아이디
 - 일정 등록시 schedule.captain_id의 기본값으로 사용
 - user.captain_yn 값이 Y인 사용자만 등록 가능
     */
    public final TableField<BoatMasterRecord, Integer> CAPTAIN_ID = createField("captain_id", org.jooq.impl.SQLDataType.INTEGER, this, "선장 아이디\n - 일정 등록시 schedule.captain_id의 기본값으로 사용\n - user.captain_yn 값이 Y인 사용자만 등록 가능");

    /**
     * The column <code>fishing_reservation.boat_master.capacity</code>. 승선 가능 인원
 - 일정 등록시 schedule.capacity의 기본값으로 사용
     */
    public final TableField<BoatMasterRecord, Integer> CAPACITY = createField("capacity", org.jooq.impl.SQLDataType.INTEGER, this, "승선 가능 인원\n - 일정 등록시 schedule.capacity의 기본값으로 사용");

    /**
     * The column <code>fishing_reservation.boat_master.fish_type</code>. 어종
 - ["다운샷", "갈치"]
 - schedule.fish_type의 기본값으로 사용됨
     */
    public final TableField<BoatMasterRecord, JsonElement> FISH_TYPE = createField("fish_type", org.jooq.impl.DefaultDataType.getDefaultDataType("\"fishing_reservation\".\"boat_master_fish_type\""), this, "어종\n - [\"다운샷\", \"갈치\"]\n - schedule.fish_type의 기본값으로 사용됨", new JsonColumnBinding());

    /**
     * The column <code>fishing_reservation.boat_master.from_time</code>. 출항시간
 - 일정 등록시 schedule.from_time의 기본값으로 사용
     */
    public final TableField<BoatMasterRecord, String> FROM_TIME = createField("from_time", org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false), this, "출항시간\n - 일정 등록시 schedule.from_time의 기본값으로 사용");

    /**
     * The column <code>fishing_reservation.boat_master.to_time</code>. 도착시간
 - 일정 등록시 schedule.to_time의 기본값으로 사용
     */
    public final TableField<BoatMasterRecord, String> TO_TIME = createField("to_time", org.jooq.impl.SQLDataType.VARCHAR(5), this, "도착시간\n - 일정 등록시 schedule.to_time의 기본값으로 사용");

    /**
     * The column <code>fishing_reservation.boat_master.price</code>. 예약금액
     */
    public final TableField<BoatMasterRecord, Integer> PRICE = createField("price", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "예약금액");

    /**
     * The column <code>fishing_reservation.boat_master.info</code>. 선박정보
     */
    public final TableField<BoatMasterRecord, String> INFO = createField("info", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "선박정보");

    /**
     * The column <code>fishing_reservation.boat_master.location</code>. 배 위치정보
 - {"lat": 36.158112, "lng": 126.500087, "title": "장고항", "address": "충청남도 ...", "snippet": ""}
 - 배 상세정보에서 사용함
     */
    public final TableField<BoatMasterRecord, JsonElement> LOCATION = createField("location", org.jooq.impl.DefaultDataType.getDefaultDataType("\"fishing_reservation\".\"boat_master_location\""), this, "배 위치정보\n - {\"lat\": 36.158112, \"lng\": 126.500087, \"title\": \"장고항\", \"address\": \"충청남도 ...\", \"snippet\": \"\"}\n - 배 상세정보에서 사용함", new JsonColumnBinding());

    /**
     * The column <code>fishing_reservation.boat_master.avatar</code>. 배 대표 이미지
     */
    public final TableField<BoatMasterRecord, String> AVATAR = createField("avatar", org.jooq.impl.SQLDataType.VARCHAR(100), this, "배 대표 이미지");

    /**
     * The column <code>fishing_reservation.boat_master.images</code>. 배 상세 이미지
 - 배 상세 화면에서 사용함
     */
    public final TableField<BoatMasterRecord, JsonElement> IMAGES = createField("images", org.jooq.impl.DefaultDataType.getDefaultDataType("\"fishing_reservation\".\"boat_master_images\""), this, "배 상세 이미지\n - 배 상세 화면에서 사용함", new JsonColumnBinding());

    /**
     * The column <code>fishing_reservation.boat_master.use_yn</code>. 사용여부
 - 값을 N으로 변경시 cancle_date 에 변경일시 값을 입력해야함
     */
    public final TableField<BoatMasterRecord, String> USE_YN = createField("use_yn", org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.VARCHAR)), this, "사용여부\n - 값을 N으로 변경시 cancle_date 에 변경일시 값을 입력해야함");

    /**
     * The column <code>fishing_reservation.boat_master.cancel_date</code>. 사용종료 일시
 - use_yn값이 N으로 변경될 때 값이 들어온다.
     */
    public final TableField<BoatMasterRecord, LocalDateTime> CANCEL_DATE = createField("cancel_date", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "사용종료 일시\n - use_yn값이 N으로 변경될 때 값이 들어온다.");

    /**
     * The column <code>fishing_reservation.boat_master.updated</code>. 수정일시
     */
    public final TableField<BoatMasterRecord, LocalDateTime> UPDATED = createField("updated", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "수정일시");

    /**
     * The column <code>fishing_reservation.boat_master.created</code>. 생성일시
     */
    public final TableField<BoatMasterRecord, LocalDateTime> CREATED = createField("created", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "생성일시");

    /**
     * Create a <code>fishing_reservation.boat_master</code> table reference
     */
    public BoatMaster() {
        this(DSL.name("boat_master"), null);
    }

    /**
     * Create an aliased <code>fishing_reservation.boat_master</code> table reference
     */
    public BoatMaster(String alias) {
        this(DSL.name(alias), BOAT_MASTER);
    }

    /**
     * Create an aliased <code>fishing_reservation.boat_master</code> table reference
     */
    public BoatMaster(Name alias) {
        this(alias, BOAT_MASTER);
    }

    private BoatMaster(Name alias, Table<BoatMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private BoatMaster(Name alias, Table<BoatMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("배 마스터 테이블\n - 하나의 선단은 보통 배를 1~5개 가짐 ( 배 추가 등록시마다 비용을 받아야됨 ) \n - 등록된 배가 없으면 앱 이용이 불가 ( 클라이언트 프로그램 )\n - 관리자용 프로그램에서 등록 가능\n - type, captain_id, capacity, fish_type, from_time, to_time의 값들은 일정(schedule) 등록시 기본팅값으로 사용\n   ( schedule 테이블에도 똑같은 컬럼이 존재 )"));
    }

    public <O extends Record> BoatMaster(Table<O> child, ForeignKey<O, BoatMasterRecord> key) {
        super(child, key, BOAT_MASTER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FishingReservation.FISHING_RESERVATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BOAT_MASTER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BoatMasterRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BOAT_MASTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BoatMasterRecord> getPrimaryKey() {
        return Keys.KEY_BOAT_MASTER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BoatMasterRecord>> getKeys() {
        return Arrays.<UniqueKey<BoatMasterRecord>>asList(Keys.KEY_BOAT_MASTER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BoatMaster as(String alias) {
        return new BoatMaster(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BoatMaster as(Name alias) {
        return new BoatMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BoatMaster rename(String name) {
        return new BoatMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BoatMaster rename(Name name) {
        return new BoatMaster(name, null);
    }
}
