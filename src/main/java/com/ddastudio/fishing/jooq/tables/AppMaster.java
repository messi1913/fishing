/*
 * This file is generated by jOOQ.
 */
package com.ddastudio.fishing.jooq.tables;


import com.ddastudio.fishing.jooq.FishingReservation;
import com.ddastudio.fishing.jooq.Indexes;
import com.ddastudio.fishing.jooq.Keys;
import com.ddastudio.fishing.jooq.tables.records.AppMasterRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 앱 마스터 테이블
 *  - 여러개의 앱에서 하나의 데이터베이스를 공유하기 때문에 각각의 앱을 구분하기 위한 테이블 
 *  - 선단별로 앱을 각각 가짐
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppMaster extends TableImpl<AppMasterRecord> {

    private static final long serialVersionUID = 1879622974;

    /**
     * The reference instance of <code>fishing_reservation.app_master</code>
     */
    public static final AppMaster APP_MASTER = new AppMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppMasterRecord> getRecordType() {
        return AppMasterRecord.class;
    }

    /**
     * The column <code>fishing_reservation.app_master.id</code>. 앱을 구분하기 위한 아이디
     */
    public final TableField<AppMasterRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "앱을 구분하기 위한 아이디");

    /**
     * The column <code>fishing_reservation.app_master.name</code>. 앱 이름
     */
    public final TableField<AppMasterRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(200), this, "앱 이름");

    /**
     * The column <code>fishing_reservation.app_master.description</code>. 앱 상세정보
     */
    public final TableField<AppMasterRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "앱 상세정보");

    /**
     * The column <code>fishing_reservation.app_master.use_yn</code>. 사용여부
     */
    public final TableField<AppMasterRecord, String> USE_YN = createField("use_yn", org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.VARCHAR)), this, "사용여부");

    /**
     * The column <code>fishing_reservation.app_master.cancel_date</code>. 취소일자 (use_yn 값이 N으로 변경시 변경된 일시를 넣어줘야 함)
     */
    public final TableField<AppMasterRecord, LocalDateTime> CANCEL_DATE = createField("cancel_date", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "취소일자 (use_yn 값이 N으로 변경시 변경된 일시를 넣어줘야 함)");

    /**
     * The column <code>fishing_reservation.app_master.updated</code>. 수정일시
     */
    public final TableField<AppMasterRecord, LocalDateTime> UPDATED = createField("updated", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "수정일시");

    /**
     * The column <code>fishing_reservation.app_master.created</code>. 생성일시
     */
    public final TableField<AppMasterRecord, LocalDateTime> CREATED = createField("created", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "생성일시");

    /**
     * Create a <code>fishing_reservation.app_master</code> table reference
     */
    public AppMaster() {
        this(DSL.name("app_master"), null);
    }

    /**
     * Create an aliased <code>fishing_reservation.app_master</code> table reference
     */
    public AppMaster(String alias) {
        this(DSL.name(alias), APP_MASTER);
    }

    /**
     * Create an aliased <code>fishing_reservation.app_master</code> table reference
     */
    public AppMaster(Name alias) {
        this(alias, APP_MASTER);
    }

    private AppMaster(Name alias, Table<AppMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppMaster(Name alias, Table<AppMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("앱 마스터 테이블\n - 여러개의 앱에서 하나의 데이터베이스를 공유하기 때문에 각각의 앱을 구분하기 위한 테이블 \n - 선단별로 앱을 각각 가짐\n"));
    }

    public <O extends Record> AppMaster(Table<O> child, ForeignKey<O, AppMasterRecord> key) {
        super(child, key, APP_MASTER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FishingReservation.FISHING_RESERVATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APP_MASTER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AppMasterRecord, Integer> getIdentity() {
        return Keys.IDENTITY_APP_MASTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AppMasterRecord> getPrimaryKey() {
        return Keys.KEY_APP_MASTER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AppMasterRecord>> getKeys() {
        return Arrays.<UniqueKey<AppMasterRecord>>asList(Keys.KEY_APP_MASTER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppMaster as(String alias) {
        return new AppMaster(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppMaster as(Name alias) {
        return new AppMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppMaster rename(String name) {
        return new AppMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppMaster rename(Name name) {
        return new AppMaster(name, null);
    }
}
