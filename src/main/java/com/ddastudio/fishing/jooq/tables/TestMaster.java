/*
 * This file is generated by jOOQ.
 */
package com.ddastudio.fishing.jooq.tables;


import com.ddastudio.fishing.common.converter.JsonColumnBinding;
import com.ddastudio.fishing.jooq.FishingReservation;
import com.ddastudio.fishing.jooq.Indexes;
import com.ddastudio.fishing.jooq.Keys;
import com.ddastudio.fishing.jooq.tables.records.TestMasterRecord;
import com.google.gson.JsonElement;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestMaster extends TableImpl<TestMasterRecord> {

    private static final long serialVersionUID = -586877710;

    /**
     * The reference instance of <code>fishing_reservation.test_master</code>
     */
    public static final TestMaster TEST_MASTER = new TestMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestMasterRecord> getRecordType() {
        return TestMasterRecord.class;
    }

    /**
     * The column <code>fishing_reservation.test_master.id</code>.
     */
    public final TableField<TestMasterRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>fishing_reservation.test_master.col1</code>.
     */
    public final TableField<TestMasterRecord, String> COL1 = createField("col1", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>fishing_reservation.test_master.col2</code>.
     */
    public final TableField<TestMasterRecord, String> COL2 = createField("col2", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>fishing_reservation.test_master.col3</code>.
     */
    public final TableField<TestMasterRecord, JsonElement> COL3 = createField("col3", org.jooq.impl.DefaultDataType.getDefaultDataType("\"fishing_reservation\".\"test_master_col3\""), this, "", new JsonColumnBinding());

    /**
     * Create a <code>fishing_reservation.test_master</code> table reference
     */
    public TestMaster() {
        this(DSL.name("test_master"), null);
    }

    /**
     * Create an aliased <code>fishing_reservation.test_master</code> table reference
     */
    public TestMaster(String alias) {
        this(DSL.name(alias), TEST_MASTER);
    }

    /**
     * Create an aliased <code>fishing_reservation.test_master</code> table reference
     */
    public TestMaster(Name alias) {
        this(alias, TEST_MASTER);
    }

    private TestMaster(Name alias, Table<TestMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestMaster(Name alias, Table<TestMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TestMaster(Table<O> child, ForeignKey<O, TestMasterRecord> key) {
        super(child, key, TEST_MASTER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FishingReservation.FISHING_RESERVATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEST_MASTER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TestMasterRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TEST_MASTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TestMasterRecord> getPrimaryKey() {
        return Keys.KEY_TEST_MASTER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TestMasterRecord>> getKeys() {
        return Arrays.<UniqueKey<TestMasterRecord>>asList(Keys.KEY_TEST_MASTER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestMaster as(String alias) {
        return new TestMaster(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestMaster as(Name alias) {
        return new TestMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestMaster rename(String name) {
        return new TestMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestMaster rename(Name name) {
        return new TestMaster(name, null);
    }
}
