/*
 * This file is generated by jOOQ.
 */
package com.ddastudio.fishing.jooq.tables;


import com.ddastudio.fishing.jooq.FishingReservation;
import com.ddastudio.fishing.jooq.tables.records.ReservationWaitingRecord;

import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 예약대기 관리
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReservationWaiting extends TableImpl<ReservationWaitingRecord> {

    private static final long serialVersionUID = 1115505991;

    /**
     * The reference instance of <code>fishing_reservation.reservation_waiting</code>
     */
    public static final ReservationWaiting RESERVATION_WAITING = new ReservationWaiting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReservationWaitingRecord> getRecordType() {
        return ReservationWaitingRecord.class;
    }

    /**
     * The column <code>fishing_reservation.reservation_waiting.id</code>.
     */
    public final TableField<ReservationWaitingRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fishing_reservation.reservation_waiting.app_id</code>.
     */
    public final TableField<ReservationWaitingRecord, Integer> APP_ID = createField("app_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fishing_reservation.reservation_waiting.reservation_id</code>.
     */
    public final TableField<ReservationWaitingRecord, Integer> RESERVATION_ID = createField("reservation_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fishing_reservation.reservation_waiting.schedule_id</code>.
     */
    public final TableField<ReservationWaitingRecord, Integer> SCHEDULE_ID = createField("schedule_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fishing_reservation.reservation_waiting.user_id</code>.
     */
    public final TableField<ReservationWaitingRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fishing_reservation.reservation_waiting.status</code>. 1:미입금 2:입금완료(개발예정) 3:예약상태로 변경 4:사용자취소
     */
    public final TableField<ReservationWaitingRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "1:미입금 2:입금완료(개발예정) 3:예약상태로 변경 4:사용자취소");

    /**
     * The column <code>fishing_reservation.reservation_waiting.person_count</code>.
     */
    public final TableField<ReservationWaitingRecord, Integer> PERSON_COUNT = createField("person_count", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fishing_reservation.reservation_waiting.use_yn</code>.
     */
    public final TableField<ReservationWaitingRecord, Integer> USE_YN = createField("use_yn", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fishing_reservation.reservation_waiting.cancle_date</code>.
     */
    public final TableField<ReservationWaitingRecord, Integer> CANCLE_DATE = createField("cancle_date", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fishing_reservation.reservation_waiting.updated</code>.
     */
    public final TableField<ReservationWaitingRecord, LocalDateTime> UPDATED = createField("updated", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>fishing_reservation.reservation_waiting.created</code>.
     */
    public final TableField<ReservationWaitingRecord, LocalDateTime> CREATED = createField("created", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>fishing_reservation.reservation_waiting</code> table reference
     */
    public ReservationWaiting() {
        this(DSL.name("reservation_waiting"), null);
    }

    /**
     * Create an aliased <code>fishing_reservation.reservation_waiting</code> table reference
     */
    public ReservationWaiting(String alias) {
        this(DSL.name(alias), RESERVATION_WAITING);
    }

    /**
     * Create an aliased <code>fishing_reservation.reservation_waiting</code> table reference
     */
    public ReservationWaiting(Name alias) {
        this(alias, RESERVATION_WAITING);
    }

    private ReservationWaiting(Name alias, Table<ReservationWaitingRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReservationWaiting(Name alias, Table<ReservationWaitingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("예약대기 관리"));
    }

    public <O extends Record> ReservationWaiting(Table<O> child, ForeignKey<O, ReservationWaitingRecord> key) {
        super(child, key, RESERVATION_WAITING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FishingReservation.FISHING_RESERVATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ReservationWaiting as(String alias) {
        return new ReservationWaiting(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ReservationWaiting as(Name alias) {
        return new ReservationWaiting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReservationWaiting rename(String name) {
        return new ReservationWaiting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReservationWaiting rename(Name name) {
        return new ReservationWaiting(name, null);
    }
}
