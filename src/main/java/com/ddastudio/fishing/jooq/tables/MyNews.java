/*
 * This file is generated by jOOQ.
 */
package com.ddastudio.fishing.jooq.tables;


import com.ddastudio.fishing.jooq.FishingReservation;
import com.ddastudio.fishing.jooq.Indexes;
import com.ddastudio.fishing.jooq.Keys;
import com.ddastudio.fishing.jooq.tables.records.MyNewsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MyNews extends TableImpl<MyNewsRecord> {

    private static final long serialVersionUID = -1827059914;

    /**
     * The reference instance of <code>fishing_reservation.my_news</code>
     */
    public static final MyNews MY_NEWS = new MyNews();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MyNewsRecord> getRecordType() {
        return MyNewsRecord.class;
    }

    /**
     * The column <code>fishing_reservation.my_news.id</code>.
     */
    public final TableField<MyNewsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>fishing_reservation.my_news.app_id</code>.
     */
    public final TableField<MyNewsRecord, Integer> APP_ID = createField("app_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fishing_reservation.my_news.user_id</code>.
     */
    public final TableField<MyNewsRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fishing_reservation.my_news.type</code>. code_master(NEWS_TYPE)
     */
    public final TableField<MyNewsRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(2).defaultValue(org.jooq.impl.DSL.inline("AP", org.jooq.impl.SQLDataType.VARCHAR)), this, "code_master(NEWS_TYPE)");

    /**
     * The column <code>fishing_reservation.my_news.message</code>.
     */
    public final TableField<MyNewsRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>fishing_reservation.my_news.route</code>.
     */
    public final TableField<MyNewsRecord, String> ROUTE = createField("route", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>fishing_reservation.my_news.confirm_date</code>.
     */
    public final TableField<MyNewsRecord, LocalDateTime> CONFIRM_DATE = createField("confirm_date", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>fishing_reservation.my_news.push_send_date</code>.
     */
    public final TableField<MyNewsRecord, LocalDateTime> PUSH_SEND_DATE = createField("push_send_date", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>fishing_reservation.my_news.use_yn</code>.
     */
    public final TableField<MyNewsRecord, String> USE_YN = createField("use_yn", org.jooq.impl.SQLDataType.VARCHAR(1).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>fishing_reservation.my_news.updated</code>.
     */
    public final TableField<MyNewsRecord, LocalDateTime> UPDATED = createField("updated", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>fishing_reservation.my_news.created</code>.
     */
    public final TableField<MyNewsRecord, LocalDateTime> CREATED = createField("created", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>fishing_reservation.my_news</code> table reference
     */
    public MyNews() {
        this(DSL.name("my_news"), null);
    }

    /**
     * Create an aliased <code>fishing_reservation.my_news</code> table reference
     */
    public MyNews(String alias) {
        this(DSL.name(alias), MY_NEWS);
    }

    /**
     * Create an aliased <code>fishing_reservation.my_news</code> table reference
     */
    public MyNews(Name alias) {
        this(alias, MY_NEWS);
    }

    private MyNews(Name alias, Table<MyNewsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MyNews(Name alias, Table<MyNewsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MyNews(Table<O> child, ForeignKey<O, MyNewsRecord> key) {
        super(child, key, MY_NEWS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FishingReservation.FISHING_RESERVATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MY_NEWS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MyNewsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MY_NEWS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MyNewsRecord> getPrimaryKey() {
        return Keys.KEY_MY_NEWS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MyNewsRecord>> getKeys() {
        return Arrays.<UniqueKey<MyNewsRecord>>asList(Keys.KEY_MY_NEWS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MyNews as(String alias) {
        return new MyNews(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MyNews as(Name alias) {
        return new MyNews(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MyNews rename(String name) {
        return new MyNews(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MyNews rename(Name name) {
        return new MyNews(name, null);
    }
}
