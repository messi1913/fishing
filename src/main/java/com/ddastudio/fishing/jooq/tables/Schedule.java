/*
 * This file is generated by jOOQ.
 */
package com.ddastudio.fishing.jooq.tables;


import com.ddastudio.fishing.common.converter.JsonColumnBinding;
import com.ddastudio.fishing.jooq.FishingReservation;
import com.ddastudio.fishing.jooq.Indexes;
import com.ddastudio.fishing.jooq.Keys;
import com.ddastudio.fishing.jooq.tables.records.ScheduleRecord;
import com.google.gson.JsonElement;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 일정 관리
 *  - 관리자가 입력
 *  - 하나의 배는 from_time이 겹치지 않으면 하루에 여러건의 일정 등록이 가능
 *  - 일정이 등록되어야 예약이 가능함
 *  - 일정 등록화면에서 배를 선택하게 되면 boat_master 테이블에 저장된 값을 기본값으로 from_time, to_time, 
 * fish_type, capacity, price, captain_id 값을 세팅해줌
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Schedule extends TableImpl<ScheduleRecord> {

    private static final long serialVersionUID = 1918395236;

    /**
     * The reference instance of <code>fishing_reservation.schedule</code>
     */
    public static final Schedule SCHEDULE = new Schedule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScheduleRecord> getRecordType() {
        return ScheduleRecord.class;
    }

    /**
     * The column <code>fishing_reservation.schedule.id</code>. 일정 아이디
     */
    public final TableField<ScheduleRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "일정 아이디");

    /**
     * The column <code>fishing_reservation.schedule.app_id</code>. 앱 아이디
     */
    public final TableField<ScheduleRecord, Integer> APP_ID = createField("app_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "앱 아이디");

    /**
     * The column <code>fishing_reservation.schedule.boat_id</code>. 배 아이디
     */
    public final TableField<ScheduleRecord, Integer> BOAT_ID = createField("boat_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "배 아이디");

    /**
     * The column <code>fishing_reservation.schedule.yyyymmdd</code>. 일자
     */
    public final TableField<ScheduleRecord, String> YYYYMMDD = createField("yyyymmdd", org.jooq.impl.SQLDataType.VARCHAR(8).nullable(false), this, "일자");

    /**
     * The column <code>fishing_reservation.schedule.name</code>.
     */
    public final TableField<ScheduleRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>fishing_reservation.schedule.from_time</code>. 출항시간
     */
    public final TableField<ScheduleRecord, String> FROM_TIME = createField("from_time", org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false), this, "출항시간");

    /**
     * The column <code>fishing_reservation.schedule.to_time</code>. 도착시간
     */
    public final TableField<ScheduleRecord, String> TO_TIME = createField("to_time", org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false), this, "도착시간");

    /**
     * The column <code>fishing_reservation.schedule.fish_type</code>. 어종
     */
    public final TableField<ScheduleRecord, JsonElement> FISH_TYPE = createField("fish_type", org.jooq.impl.DefaultDataType.getDefaultDataType("\"fishing_reservation\".\"schedule_fish_type\"").nullable(false), this, "어종", new JsonColumnBinding());

    /**
     * The column <code>fishing_reservation.schedule.capacity</code>. 승선 가능인원
     */
    public final TableField<ScheduleRecord, Integer> CAPACITY = createField("capacity", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "승선 가능인원");

    /**
     * The column <code>fishing_reservation.schedule.confirm_count</code>. 예약 확정된 인원수
     */
    public final TableField<ScheduleRecord, Integer> CONFIRM_COUNT = createField("confirm_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "예약 확정된 인원수");

    /**
     * The column <code>fishing_reservation.schedule.deposit_waiting_count</code>.
     */
    public final TableField<ScheduleRecord, Integer> DEPOSIT_WAITING_COUNT = createField("deposit_waiting_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>fishing_reservation.schedule.waiting_count</code>. 예약 대기 인원수
     */
    public final TableField<ScheduleRecord, Integer> WAITING_COUNT = createField("waiting_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "예약 대기 인원수");

    /**
     * The column <code>fishing_reservation.schedule.price</code>. 금액
     */
    public final TableField<ScheduleRecord, Integer> PRICE = createField("price", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "금액");

    /**
     * The column <code>fishing_reservation.schedule.captain_id</code>. 선장 아이디
     */
    public final TableField<ScheduleRecord, Integer> CAPTAIN_ID = createField("captain_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("-1", org.jooq.impl.SQLDataType.INTEGER)), this, "선장 아이디");

    /**
     * The column <code>fishing_reservation.schedule.use_yn</code>.
     */
    public final TableField<ScheduleRecord, String> USE_YN = createField("use_yn", org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>fishing_reservation.schedule.cancel_code</code>. 일정 취소 코드
 - code_master(SCHEDULE_CANCEL)
 - 가타(99) 입력시 cancel_reason에 기타 사유 입력 할 수 있도록 해야함
     */
    public final TableField<ScheduleRecord, String> CANCEL_CODE = createField("cancel_code", org.jooq.impl.SQLDataType.VARCHAR(10), this, "일정 취소 코드\n - code_master(SCHEDULE_CANCEL)\n - 가타(99) 입력시 cancel_reason에 기타 사유 입력 할 수 있도록 해야함");

    /**
     * The column <code>fishing_reservation.schedule.cancel_reason</code>.
     */
    public final TableField<ScheduleRecord, String> CANCEL_REASON = createField("cancel_reason", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>fishing_reservation.schedule.cancel_date</code>.
     */
    public final TableField<ScheduleRecord, LocalDateTime> CANCEL_DATE = createField("cancel_date", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>fishing_reservation.schedule.updated</code>.
     */
    public final TableField<ScheduleRecord, LocalDateTime> UPDATED = createField("updated", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>fishing_reservation.schedule.created</code>.
     */
    public final TableField<ScheduleRecord, LocalDateTime> CREATED = createField("created", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>fishing_reservation.schedule</code> table reference
     */
    public Schedule() {
        this(DSL.name("schedule"), null);
    }

    /**
     * Create an aliased <code>fishing_reservation.schedule</code> table reference
     */
    public Schedule(String alias) {
        this(DSL.name(alias), SCHEDULE);
    }

    /**
     * Create an aliased <code>fishing_reservation.schedule</code> table reference
     */
    public Schedule(Name alias) {
        this(alias, SCHEDULE);
    }

    private Schedule(Name alias, Table<ScheduleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Schedule(Name alias, Table<ScheduleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("일정 관리\n - 관리자가 입력\n - 하나의 배는 from_time이 겹치지 않으면 하루에 여러건의 일정 등록이 가능\n - 일정이 등록되어야 예약이 가능함\n - 일정 등록화면에서 배를 선택하게 되면 boat_master 테이블에 저장된 값을 기본값으로 from_time, to_time, fish_type, capacity, price, captain_id 값을 세팅해줌"));
    }

    public <O extends Record> Schedule(Table<O> child, ForeignKey<O, ScheduleRecord> key) {
        super(child, key, SCHEDULE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FishingReservation.FISHING_RESERVATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SCHEDULE_APP_ID, Indexes.SCHEDULE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ScheduleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SCHEDULE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ScheduleRecord> getPrimaryKey() {
        return Keys.KEY_SCHEDULE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ScheduleRecord>> getKeys() {
        return Arrays.<UniqueKey<ScheduleRecord>>asList(Keys.KEY_SCHEDULE_PRIMARY, Keys.KEY_SCHEDULE_APP_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schedule as(String alias) {
        return new Schedule(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schedule as(Name alias) {
        return new Schedule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Schedule rename(String name) {
        return new Schedule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Schedule rename(Name name) {
        return new Schedule(name, null);
    }
}
