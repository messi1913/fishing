/*
 * This file is generated by jOOQ.
 */
package com.ddastudio.fishing.jooq.tables;


import com.ddastudio.fishing.jooq.FishingReservation;
import com.ddastudio.fishing.jooq.Indexes;
import com.ddastudio.fishing.jooq.Keys;
import com.ddastudio.fishing.jooq.tables.records.FishMasterRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 어종 관리
 *  - 현재 사용 안함
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FishMaster extends TableImpl<FishMasterRecord> {

    private static final long serialVersionUID = -199252931;

    /**
     * The reference instance of <code>fishing_reservation.fish_master</code>
     */
    public static final FishMaster FISH_MASTER = new FishMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FishMasterRecord> getRecordType() {
        return FishMasterRecord.class;
    }

    /**
     * The column <code>fishing_reservation.fish_master.id</code>. 어종 아이디
     */
    public final TableField<FishMasterRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "어종 아이디");

    /**
     * The column <code>fishing_reservation.fish_master.name</code>. 어종 이름
     */
    public final TableField<FishMasterRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "어종 이름");

    /**
     * The column <code>fishing_reservation.fish_master.type</code>. 어종종류(S:바다, F:민물)
     */
    public final TableField<FishMasterRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("S", org.jooq.impl.SQLDataType.VARCHAR)), this, "어종종류(S:바다, F:민물)");

    /**
     * The column <code>fishing_reservation.fish_master.created</code>. 생성일자
     */
    public final TableField<FishMasterRecord, LocalDateTime> CREATED = createField("created", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "생성일자");

    /**
     * Create a <code>fishing_reservation.fish_master</code> table reference
     */
    public FishMaster() {
        this(DSL.name("fish_master"), null);
    }

    /**
     * Create an aliased <code>fishing_reservation.fish_master</code> table reference
     */
    public FishMaster(String alias) {
        this(DSL.name(alias), FISH_MASTER);
    }

    /**
     * Create an aliased <code>fishing_reservation.fish_master</code> table reference
     */
    public FishMaster(Name alias) {
        this(alias, FISH_MASTER);
    }

    private FishMaster(Name alias, Table<FishMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private FishMaster(Name alias, Table<FishMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("어종 관리\n - 현재 사용 안함"));
    }

    public <O extends Record> FishMaster(Table<O> child, ForeignKey<O, FishMasterRecord> key) {
        super(child, key, FISH_MASTER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FishingReservation.FISHING_RESERVATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FISH_MASTER_FISH_MASTER_ID_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FishMasterRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FISH_MASTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FishMasterRecord>> getKeys() {
        return Arrays.<UniqueKey<FishMasterRecord>>asList(Keys.KEY_FISH_MASTER_FISH_MASTER_ID_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FishMaster as(String alias) {
        return new FishMaster(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FishMaster as(Name alias) {
        return new FishMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FishMaster rename(String name) {
        return new FishMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FishMaster rename(Name name) {
        return new FishMaster(name, null);
    }
}
