/*
 * This file is generated by jOOQ.
 */
package com.ddastudio.fishing.jooq.tables;


import com.ddastudio.fishing.jooq.FishingReservation;
import com.ddastudio.fishing.jooq.Indexes;
import com.ddastudio.fishing.jooq.Keys;
import com.ddastudio.fishing.jooq.tables.records.CodeMasterRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeMaster extends TableImpl<CodeMasterRecord> {

    private static final long serialVersionUID = 683992279;

    /**
     * The reference instance of <code>fishing_reservation.code_master</code>
     */
    public static final CodeMaster CODE_MASTER = new CodeMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodeMasterRecord> getRecordType() {
        return CodeMasterRecord.class;
    }

    /**
     * The column <code>fishing_reservation.code_master.type_code</code>. 타입 코드
     */
    public final TableField<CodeMasterRecord, String> TYPE_CODE = createField("type_code", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "타입 코드");

    /**
     * The column <code>fishing_reservation.code_master.code</code>. 코드
     */
    public final TableField<CodeMasterRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "코드");

    /**
     * The column <code>fishing_reservation.code_master.code_name</code>. 코드 이름
     */
    public final TableField<CodeMasterRecord, String> CODE_NAME = createField("code_name", org.jooq.impl.SQLDataType.VARCHAR(150), this, "코드 이름");

    /**
     * The column <code>fishing_reservation.code_master.rmk</code>. 비고
     */
    public final TableField<CodeMasterRecord, String> RMK = createField("rmk", org.jooq.impl.SQLDataType.VARCHAR(500), this, "비고");

    /**
     * The column <code>fishing_reservation.code_master.use_yn</code>.
     */
    public final TableField<CodeMasterRecord, String> USE_YN = createField("use_yn", org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>fishing_reservation.code_master.UPDATED</code>. 수정일시
     */
    public final TableField<CodeMasterRecord, LocalDateTime> UPDATED = createField("UPDATED", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "수정일시");

    /**
     * The column <code>fishing_reservation.code_master.created</code>. 생성일시
     */
    public final TableField<CodeMasterRecord, LocalDateTime> CREATED = createField("created", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "생성일시");

    /**
     * Create a <code>fishing_reservation.code_master</code> table reference
     */
    public CodeMaster() {
        this(DSL.name("code_master"), null);
    }

    /**
     * Create an aliased <code>fishing_reservation.code_master</code> table reference
     */
    public CodeMaster(String alias) {
        this(DSL.name(alias), CODE_MASTER);
    }

    /**
     * Create an aliased <code>fishing_reservation.code_master</code> table reference
     */
    public CodeMaster(Name alias) {
        this(alias, CODE_MASTER);
    }

    private CodeMaster(Name alias, Table<CodeMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private CodeMaster(Name alias, Table<CodeMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CodeMaster(Table<O> child, ForeignKey<O, CodeMasterRecord> key) {
        super(child, key, CODE_MASTER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FishingReservation.FISHING_RESERVATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CODE_MASTER_CODE_MASTER_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CodeMasterRecord>> getKeys() {
        return Arrays.<UniqueKey<CodeMasterRecord>>asList(Keys.KEY_CODE_MASTER_CODE_MASTER_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeMaster as(String alias) {
        return new CodeMaster(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeMaster as(Name alias) {
        return new CodeMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeMaster rename(String name) {
        return new CodeMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeMaster rename(Name name) {
        return new CodeMaster(name, null);
    }
}
