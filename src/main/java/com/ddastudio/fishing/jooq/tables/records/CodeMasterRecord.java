/*
 * This file is generated by jOOQ.
 */
package com.ddastudio.fishing.jooq.tables.records;


import com.ddastudio.fishing.jooq.tables.CodeMaster;

import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeMasterRecord extends TableRecordImpl<CodeMasterRecord> implements Record7<String, String, String, String, String, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = -1242120844;

    /**
     * Setter for <code>fishing_reservation.code_master.type_code</code>. 타입 코드
     */
    public void setTypeCode(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>fishing_reservation.code_master.type_code</code>. 타입 코드
     */
    public String getTypeCode() {
        return (String) get(0);
    }

    /**
     * Setter for <code>fishing_reservation.code_master.code</code>. 코드
     */
    public void setCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>fishing_reservation.code_master.code</code>. 코드
     */
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>fishing_reservation.code_master.code_name</code>. 코드 이름
     */
    public void setCodeName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>fishing_reservation.code_master.code_name</code>. 코드 이름
     */
    public String getCodeName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>fishing_reservation.code_master.rmk</code>. 비고
     */
    public void setRmk(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>fishing_reservation.code_master.rmk</code>. 비고
     */
    public String getRmk() {
        return (String) get(3);
    }

    /**
     * Setter for <code>fishing_reservation.code_master.use_yn</code>.
     */
    public void setUseYn(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>fishing_reservation.code_master.use_yn</code>.
     */
    public String getUseYn() {
        return (String) get(4);
    }

    /**
     * Setter for <code>fishing_reservation.code_master.UPDATED</code>. 수정일시
     */
    public void setUpdated(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>fishing_reservation.code_master.UPDATED</code>. 수정일시
     */
    public LocalDateTime getUpdated() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>fishing_reservation.code_master.created</code>. 생성일시
     */
    public void setCreated(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>fishing_reservation.code_master.created</code>. 생성일시
     */
    public LocalDateTime getCreated() {
        return (LocalDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<String, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<String, String, String, String, String, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row7) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return CodeMaster.CODE_MASTER.TYPE_CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return CodeMaster.CODE_MASTER.CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return CodeMaster.CODE_MASTER.CODE_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return CodeMaster.CODE_MASTER.RMK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return CodeMaster.CODE_MASTER.USE_YN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field6() {
        return CodeMaster.CODE_MASTER.UPDATED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field7() {
        return CodeMaster.CODE_MASTER.CREATED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getTypeCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getCodeName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getRmk();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getUseYn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component6() {
        return getUpdated();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component7() {
        return getCreated();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getTypeCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getCodeName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getRmk();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getUseYn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value6() {
        return getUpdated();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value7() {
        return getCreated();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeMasterRecord value1(String value) {
        setTypeCode(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeMasterRecord value2(String value) {
        setCode(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeMasterRecord value3(String value) {
        setCodeName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeMasterRecord value4(String value) {
        setRmk(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeMasterRecord value5(String value) {
        setUseYn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeMasterRecord value6(LocalDateTime value) {
        setUpdated(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeMasterRecord value7(LocalDateTime value) {
        setCreated(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeMasterRecord values(String value1, String value2, String value3, String value4, String value5, LocalDateTime value6, LocalDateTime value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CodeMasterRecord
     */
    public CodeMasterRecord() {
        super(CodeMaster.CODE_MASTER);
    }

    /**
     * Create a detached, initialised CodeMasterRecord
     */
    public CodeMasterRecord(String typeCode, String code, String codeName, String rmk, String useYn, LocalDateTime updated, LocalDateTime created) {
        super(CodeMaster.CODE_MASTER);

        set(0, typeCode);
        set(1, code);
        set(2, codeName);
        set(3, rmk);
        set(4, useYn);
        set(5, updated);
        set(6, created);
    }
}
