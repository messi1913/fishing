/*
 * This file is generated by jOOQ.
 */
package com.ddastudio.fishing.jooq.tables;


import com.ddastudio.fishing.jooq.FishingReservation;
import com.ddastudio.fishing.jooq.Indexes;
import com.ddastudio.fishing.jooq.Keys;
import com.ddastudio.fishing.jooq.tables.records.CommunityContentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 커뮤니티 게시글
 *  - 현재 사용안함
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommunityContent extends TableImpl<CommunityContentRecord> {

    private static final long serialVersionUID = -1707242754;

    /**
     * The reference instance of <code>fishing_reservation.community_content</code>
     */
    public static final CommunityContent COMMUNITY_CONTENT = new CommunityContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommunityContentRecord> getRecordType() {
        return CommunityContentRecord.class;
    }

    /**
     * The column <code>fishing_reservation.community_content.id</code>.
     */
    public final TableField<CommunityContentRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>fishing_reservation.community_content.uid</code>.
     */
    public final TableField<CommunityContentRecord, UInteger> UID = createField("uid", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>fishing_reservation.community_content.body</code>.
     */
    public final TableField<CommunityContentRecord, String> BODY = createField("body", org.jooq.impl.SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>fishing_reservation.community_content.anonymous</code>.
     */
    public final TableField<CommunityContentRecord, UInteger> ANONYMOUS = createField("anonymous", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>fishing_reservation.community_content.good</code>.
     */
    public final TableField<CommunityContentRecord, UInteger> GOOD = createField("good", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>fishing_reservation.community_content.bad</code>.
     */
    public final TableField<CommunityContentRecord, UInteger> BAD = createField("bad", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>fishing_reservation.community_content.comments</code>.
     */
    public final TableField<CommunityContentRecord, UInteger> COMMENTS = createField("comments", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>fishing_reservation.community_content.deleted</code>.
     */
    public final TableField<CommunityContentRecord, UInteger> DELETED = createField("deleted", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>fishing_reservation.community_content.reported</code>.
     */
    public final TableField<CommunityContentRecord, UInteger> REPORTED = createField("reported", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>fishing_reservation.community_content.created</code>.
     */
    public final TableField<CommunityContentRecord, LocalDateTime> CREATED = createField("created", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>fishing_reservation.community_content.updated</code>.
     */
    public final TableField<CommunityContentRecord, LocalDateTime> UPDATED = createField("updated", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>fishing_reservation.community_content</code> table reference
     */
    public CommunityContent() {
        this(DSL.name("community_content"), null);
    }

    /**
     * Create an aliased <code>fishing_reservation.community_content</code> table reference
     */
    public CommunityContent(String alias) {
        this(DSL.name(alias), COMMUNITY_CONTENT);
    }

    /**
     * Create an aliased <code>fishing_reservation.community_content</code> table reference
     */
    public CommunityContent(Name alias) {
        this(alias, COMMUNITY_CONTENT);
    }

    private CommunityContent(Name alias, Table<CommunityContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private CommunityContent(Name alias, Table<CommunityContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("커뮤니티 게시글\n - 현재 사용안함"));
    }

    public <O extends Record> CommunityContent(Table<O> child, ForeignKey<O, CommunityContentRecord> key) {
        super(child, key, COMMUNITY_CONTENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FishingReservation.FISHING_RESERVATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMMUNITY_CONTENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CommunityContentRecord> getPrimaryKey() {
        return Keys.KEY_COMMUNITY_CONTENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CommunityContentRecord>> getKeys() {
        return Arrays.<UniqueKey<CommunityContentRecord>>asList(Keys.KEY_COMMUNITY_CONTENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommunityContent as(String alias) {
        return new CommunityContent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommunityContent as(Name alias) {
        return new CommunityContent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommunityContent rename(String name) {
        return new CommunityContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommunityContent rename(Name name) {
        return new CommunityContent(name, null);
    }
}
