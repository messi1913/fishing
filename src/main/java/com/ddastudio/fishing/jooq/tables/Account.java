/*
 * This file is generated by jOOQ.
 */
package com.ddastudio.fishing.jooq.tables;


import com.ddastudio.fishing.jooq.FishingReservation;
import com.ddastudio.fishing.jooq.Indexes;
import com.ddastudio.fishing.jooq.Keys;
import com.ddastudio.fishing.jooq.tables.records.AccountRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Account extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = 285753042;

    /**
     * The reference instance of <code>fishing_reservation.account</code>
     */
    public static final Account ACCOUNT = new Account();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>fishing_reservation.account.id</code>.
     */
    public final TableField<AccountRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>fishing_reservation.account.account_status</code>.
     */
    public final TableField<AccountRecord, String> ACCOUNT_STATUS = createField("account_status", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fishing_reservation.account.app_id</code>.
     */
    public final TableField<AccountRecord, Integer> APP_ID = createField("app_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>fishing_reservation.account.created</code>.
     */
    public final TableField<AccountRecord, LocalDateTime> CREATED = createField("created", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>fishing_reservation.account.updated</code>.
     */
    public final TableField<AccountRecord, LocalDateTime> UPDATED = createField("updated", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>fishing_reservation.account.use_yn</code>.
     */
    public final TableField<AccountRecord, String> USE_YN = createField("use_yn", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fishing_reservation.account.avatar</code>.
     */
    public final TableField<AccountRecord, String> AVATAR = createField("avatar", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fishing_reservation.account.cancel_date</code>.
     */
    public final TableField<AccountRecord, LocalDate> CANCEL_DATE = createField("cancel_date", org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>fishing_reservation.account.captain_yn</code>.
     */
    public final TableField<AccountRecord, String> CAPTAIN_YN = createField("captain_yn", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fishing_reservation.account.email</code>.
     */
    public final TableField<AccountRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fishing_reservation.account.email_check</code>.
     */
    public final TableField<AccountRecord, String> EMAIL_CHECK = createField("email_check", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fishing_reservation.account.name</code>.
     */
    public final TableField<AccountRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fishing_reservation.account.phone_no</code>.
     */
    public final TableField<AccountRecord, String> PHONE_NO = createField("phone_no", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>fishing_reservation.account.provider</code>.
     */
    public final TableField<AccountRecord, String> PROVIDER = createField("provider", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fishing_reservation.account.provider_uid</code>.
     */
    public final TableField<AccountRecord, String> PROVIDER_UID = createField("provider_uid", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fishing_reservation.account.pw</code>.
     */
    public final TableField<AccountRecord, String> PW = createField("pw", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fishing_reservation.account.refresh_token</code>.
     */
    public final TableField<AccountRecord, String> REFRESH_TOKEN = createField("refresh_token", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fishing_reservation.account.role</code>.
     */
    public final TableField<AccountRecord, String> ROLE = createField("role", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>fishing_reservation.account.sms_verify_no</code>.
     */
    public final TableField<AccountRecord, String> SMS_VERIFY_NO = createField("sms_verify_no", org.jooq.impl.SQLDataType.VARCHAR(6), this, "");

    /**
     * The column <code>fishing_reservation.account.auth_token</code>.
     */
    public final TableField<AccountRecord, String> AUTH_TOKEN = createField("auth_token", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>fishing_reservation.account</code> table reference
     */
    public Account() {
        this(DSL.name("account"), null);
    }

    /**
     * Create an aliased <code>fishing_reservation.account</code> table reference
     */
    public Account(String alias) {
        this(DSL.name(alias), ACCOUNT);
    }

    /**
     * Create an aliased <code>fishing_reservation.account</code> table reference
     */
    public Account(Name alias) {
        this(alias, ACCOUNT);
    }

    private Account(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Account(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Account(Table<O> child, ForeignKey<O, AccountRecord> key) {
        super(child, key, ACCOUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FishingReservation.FISHING_RESERVATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCOUNT_PRIMARY, Indexes.ACCOUNT_UK_3CHG059P7XVAFVSVRO01UBODQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccountRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountRecord>>asList(Keys.KEY_ACCOUNT_PRIMARY, Keys.KEY_ACCOUNT_UK_3CHG059P7XVAFVSVRO01UBODQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Account as(String alias) {
        return new Account(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Account as(Name alias) {
        return new Account(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(String name) {
        return new Account(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(Name name) {
        return new Account(name, null);
    }
}
