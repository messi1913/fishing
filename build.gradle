plugins {
    id 'org.asciidoctor.convert' version '1.5.3'
    id 'org.springframework.boot' version '2.1.6.RELEASE'
    id 'java'
    id 'nu.studer.jooq' version '3.0.3'
    id 'com.bmuschko.docker-spring-boot-application' version '4.10.0'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.ddastudio'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springBootAdminVersion', "2.1.5")
}


//REST DOCS
test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }

}


task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/asciidoc/html5/")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
//    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.session:spring-session-core'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.1.5.RELEASE'
//    implementation 'de.codecentric:spring-boot-admin-starter-client'
    implementation 'org.modelmapper:modelmapper:2.3.1'
    implementation 'com.vladmihalcea:hibernate-types-5:1.2.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'net.nurigo:javaSDK:2.2'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    jooqRuntime 'mysql:mysql-connector-java'
}

//dependencyManagement {
//    imports {
//        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
//    }
//}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

//JOOQ 설정
jooq {
    fishing(sourceSets.main) {
        jdbc {
            driver = 'com.mysql.jdbc.Driver'
            url = 'jdbc:mysql://45.77.22.61:5306/fishing_reservation?serverTimezone=UTC'
            user = 'maldini'
            password = 'tjalswns#14rlaalsgh#16'
            schema = 'fishing_reservation'
        }
        generator {
            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = 'fishing_reservation'
                forcedTypes{
                    forcedType{
                        userType = 'com.google.gson.JsonElement'
                        binding = 'com.ddastudio.fishing.common.converter.JsonColumnBinding'
                        types = 'json'

                    }
                }
            }
            target {
                packageName = 'com.ddastudio.fishing.jooq'
                directory = "src/main/java"
            }
            generate {
                javaTimeTypes = true
            }
        }
    }
}